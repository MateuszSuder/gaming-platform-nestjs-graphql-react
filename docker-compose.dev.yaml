services:
  api-gateway:
    restart: always
    build:
      context: ./backend/api-gateway
    ports:
      - 3010:3010
    volumes:
      - ./backend/api-gateway:/api-gateway
      - ./backend/api-gateway/node_modules:/api-gateway/node_modules
    environment:
      COOKIE_SECRET: ${COOKIE_SECRET}
    depends_on:
      - zookeeper
      - broker
  auth-service:
    restart: always
    build:
      context: ./backend/services/auth-service
    depends_on:
      - zookeeper
      - broker
      - mongo-auth
    volumes:
      - ./backend/services/auth-service:/auth-service
      - ./backend/services/auth-service/node_modules:/auth-service/node_modules
    environment:
      MONGO_USERNAME: ${DB_USERNAME}
      MONGO_PASSWORD: ${DB_AUTH_PASSWORD}
      PEPPER: ${AUTH_PEPPER}
      AUTH_JWT: ${AUTH_JWT}
  user-service:
    restart: always
    build:
      context: ./backend/services/user-service
    depends_on:
      - zookeeper
      - broker
      - mongo-user
    volumes:
      - ./backend/services/user-service:/user-service
    environment:
      MONGO_USERNAME: ${DB_USERNAME}
      MONGO_PASSWORD: ${DB_USER_PASSWORD}
  balance-service:
    restart: always
    build:
      context: ./backend/services/balance-service
    depends_on:
      - zookeeper
      - broker
      - mongo-balance
    volumes:
      - ./backend/services/balance-service:/balance-service
    environment:
      MONGO_USERNAME: ${DB_USERNAME}
      MONGO_PASSWORD: ${DB_BALANCE_PASSWORD}
  game-service:
    restart: always
    build:
      context: ./backend/services/game-service
    depends_on:
      - zookeeper
      - broker
      - mongo-game
    volumes:
      - ./backend/services/game-service:/game-service
    environment:
      MONGO_USERNAME: ${DB_USERNAME}
      MONGO_PASSWORD: ${DB_GAME_PASSWORD}
  mongo-auth:
    container_name: mongo-auth
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_AUTH_PASSWORD}
    volumes:
      - ./mongo_data/auth:/data/db
    ports:
      - "27017:27017"
  mongo-user:
    container_name: mongo-user
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_USER_PASSWORD}
    volumes:
      - ./mongo_data/user:/data/db
    ports:
      - "27018:27017"
  mongo-balance:
    container_name: mongo-balance
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_BALANCE_PASSWORD}
    volumes:
      - ./mongo_data/balance:/data/db
    ports:
      - "27019:27017"
  mongo-game:
    container_name: mongo-game
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_GAME_PASSWORD}
    volumes:
      - ./mongo_data/game:/data/db
    ports:
      - "27020:27017"
  zookeeper:
    image: wurstmeister/zookeeper:latest
    tmpfs: "/datalog"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
  broker:
    image: wurstmeister/kafka:2.11-1.1.1
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_ADVERTISED_HOST_NAME: "broker"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: "PLAINTEXT://:29092,PLAINTEXT_HOST://:9092"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "test-topic:1:1"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  schema-registry:
    image: confluentinc/cp-schema-registry:5.5.1
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
  frontend:
    container_name: frontend
    restart: always
    environment:
      NODE_ENV: development
      WATCHPACK_POLLING: true
      CHOKIDAR_USEPOLLING: true
      WDS_SOCKET_PORT: 3000
    build:
      context: ./frontend
    volumes:
      - ./frontend:/app
      - ./frontend/app:/app/app
      - ./frontend/components:/app/components
      - ./frontend/node_modules:/app/node_modules
      - ./frontend/.next:/app/.next
    ports:
      - 3000:3000
  nginx:
    restart: always
    image: nginx:latest
    ports:
      - 8080:80
    volumes:
      - type: bind
        source: ./nginx/nginx.conf
        target: /etc/nginx/nginx.conf
    depends_on:
      - api-gateway